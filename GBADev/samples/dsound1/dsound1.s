@ Generated by gcc 3.0.4 for ARM/elf
	.file	"dsound1.i"
@ GNU C version 3.0.4 (arm-thumb-elf)
@	compiled by GNU C version 2.95.3-5 (cygwin special).
@ options passed:  -fpreprocessed -mthumb-interwork -mlong-calls -O1 -Wall
@ -fverbose-asm
@ options enabled:  -fdefer-pop -fomit-frame-pointer -fthread-jumps
@ -fpeephole -ffunction-cse -finline -fkeep-static-consts
@ -freg-struct-return -fsched-interblock -fsched-spec -fbranch-count-reg
@ -fcommon -fverbose-asm -fgnu-linker -fargument-alias -fident
@ -fguess-branch-probability -fmath-errno -mapcs -mapcs-frame -mapcs-32
@ -msoft-float -mthumb-interwork -mlong-calls

	.global	newframe
	.data
	.type	newframe,object
	.size	newframe,1
newframe:
	.byte	0
	.global	cputime
	.type	cputime,object
	.size	cputime,1
cputime:
	.byte	0
	.global	frames
	.align	2
	.type	frames,object
	.size	frames,4
frames:
	.word	0
	.text
	.align	2
	.global	VblFunc
	.type	VblFunc,function
VblFunc:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, current_function_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4
	ldr	r3, .L2
	mov	lr, pc
	bx	r3
	ldr	r2, .L2+4
	ldr	r3, [r2, #0]
	add	r3, r3, #1
	str	r3, [r2, #0]
	mov	r2, #1
	ldr	r3, .L2+8
	strb	r2, [r3, #0]
	ldmea	fp, {fp, sp, lr}
	bx	lr
.L3:
	.align	2
.L2:
	.word	ham_SyncMixer
	.word	frames
	.word	newframe
.Lfe1:
	.size	VblFunc,.Lfe1-VblFunc
	.section .rodata
	.align	2
.LC0:
	.ascii	"HAM direct sound example\000"
	.align	2
.LC1:
	.ascii	"Mixer   freq: %6d\000"
	.align	2
.LC2:
	.ascii	"Press Up/down/left/right\000"
	.align	2
.LC3:
	.ascii	"to change the bitrates\000"
	.align	2
.LC4:
	.ascii	"and A to mix another sound\000"
	.align	2
.LC5:
	.ascii	"Sample  freq: %6d\000"
	.align	2
.LC6:
	.ascii	"Sample2 freq: %6d\000"
	.align	2
.LC7:
	.ascii	"CPU percent: %6d\000"
	.text
	.align	2
	.global	main
	.type	main,function
main:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 1, current_function_anonymous_args = 0
	mov	ip, sp
	stmfd	sp!, {r4, r5, r6, r7, r8, sl, fp, ip, lr, pc}
	sub	fp, ip, #4
	ldr	r3, .L18+8
	mov	lr, pc
	bx	r3
	ldr	r3, .L18+12
	mov	lr, pc
	bx	r3
	mov	r0, #0
	ldr	r3, .L18+16
	mov	lr, pc
	bx	r3
	mov	r0, #2
	mov	r1, r0
	ldr	r2, .L18+20
	ldr	r4, .L18+96
	mov	lr, pc
	bx	r4
	mov	r0, #2
	mov	r1, #4
	ldr	r2, .L18+24
	mov	r3, #26624
	add	r3, r3, #133
	mov	lr, pc
	bx	r4
	mov	r0, #2
	mov	r1, #16
	ldr	r2, .L18+28
	mov	lr, pc
	bx	r4
	mov	r0, #2
	mov	r1, #17
	ldr	r2, .L18+32
	mov	lr, pc
	bx	r4
	mov	r0, #2
	mov	r1, #18
	ldr	r2, .L18+36
	mov	lr, pc
	bx	r4
	mov	r0, #26624
	add	r0, r0, #133
	ldr	r3, .L18+40
	mov	lr, pc
	bx	r3
	mov	r0, #0
	ldr	r1, .L18+44
	ldr	r3, .L18+48
	mov	lr, pc
	bx	r3
	ldr	r3, .L18+52
	ldr	r2, [r3, #4]
	mov	r2, r2, asl #6
	mov	r2, r2, lsr #16
	add	r0, r3, #16
	ldr	r1, [r3, #12]
	ldr	r4, .L18+56
	mov	lr, pc
	bx	r4
	mov	r7, r0
	ldr	r3, .L18+60
	ldr	r2, [r3, #4]
	mov	r2, r2, asl #6
	mov	r2, r2, lsr #16
	add	r0, r3, #16
	ldr	r1, [r3, #12]
	mov	lr, pc
	bx	r4
	mov	r8, r0
	ldr	sl, .L18+64
	mov	r6, r7
	mov	r5, r8
.L17:
	ldr	r3, .L18+108
	ldrb	r3, [r3, #0]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L17
	mov	r4, #67108864
	ldrh	r3, [r4, #6]	@ movhi
	cmp	r3, #0
	bne	.L17
	ldr	r3, .L18+68
	mov	lr, pc
	bx	r3
	ldrh	r3, [r4, #6]	@ movhi
	strb	r3, [sl, #0]
	ldrb	r0, [sl, #0]	@ zero_extendqisi2
	ldr	r3, .L18+72
	mov	lr, pc
	bx	r3
	ldr	ip, .L18+76
	adr	r2, .L18
	ldmia	r2, {r2-r3}
	mov	lr, pc
	bx	ip
	ldr	r3, .L18+80
	mov	lr, pc
	bx	r3
	strb	r0, [sl, #0]
	add	r3, r4, #304
	ldrh	r3, [r3, #0]	@ movhi
	mvn	r3, r3
	tst	r3, #128
	beq	.L10
	ldrh	r3, [r6, #8]	@ movhi
	sub	r3, r3, #10
	strh	r3, [r6, #8]	@ movhi 
	ldrh	r1, [r6, #8]
	mov	r0, r7
	ldr	r3, .L18+84
	mov	lr, pc
	bx	r3
.L10:
	mov	r3, #67108864
	add	r3, r3, #304
	ldrh	r3, [r3, #0]	@ movhi
	mvn	r3, r3
	tst	r3, #64
	beq	.L11
	ldrh	r3, [r6, #8]	@ movhi
	add	r3, r3, #10
	strh	r3, [r6, #8]	@ movhi 
	ldrh	r1, [r6, #8]
	mov	r0, r7
	ldr	r3, .L18+84
	mov	lr, pc
	bx	r3
.L11:
	mov	r3, #67108864
	add	r3, r3, #304
	ldrh	r3, [r3, #0]	@ movhi
	mvn	r3, r3
	tst	r3, #32
	beq	.L12
	ldrh	r3, [r5, #8]	@ movhi
	sub	r3, r3, #10
	strh	r3, [r5, #8]	@ movhi 
	ldrh	r1, [r5, #8]
	mov	r0, r5
	ldr	r3, .L18+84
	mov	lr, pc
	bx	r3
	b	.L19
.L20:
	.align	2
.L18:
	.long 0x3fdc28f5, 0xc28f5c29	@ double 4.40000000000000002220e-1
	.word	__gccmain
	.word	ham_Init
	.word	ham_InitText
	.word	.LC0
	.word	.LC1
	.word	.LC2
	.word	.LC3
	.word	.LC4
	.word	ham_InitMixer
	.word	VblFunc
	.word	ham_StartIntHandler
	.word	_binary_bfly_raw_start
	.word	ham_InitSample
	.word	_binary_sound2_raw_start
	.word	cputime
	.word	ham_UpdateMixer
	.word	__floatsidf
	.word	__muldf3
	.word	__fixunsdfsi
	.word	ham_ChangeSampleBitrate
	.word	ham_PlaySample
	.word	.LC5
	.word	ham_DrawText
	.word	.LC6
	.word	.LC7
	.word	newframe
.L19:
.L12:
	mov	r3, #67108864
	add	r3, r3, #304
	ldrh	r3, [r3, #0]	@ movhi
	mvn	r3, r3
	tst	r3, #16
	beq	.L13
	ldrh	r3, [r5, #8]	@ movhi
	add	r3, r3, #10
	strh	r3, [r5, #8]	@ movhi 
	ldrh	r1, [r5, #8]
	mov	r0, r5
	ldr	r3, .L18+84
	mov	lr, pc
	bx	r3
.L13:
	mov	r3, #67108864
	add	r3, r3, #304
	ldrh	r3, [r3, #0]	@ movhi
	mvn	r3, r3
	tst	r3, #1
	beq	.L14
	mov	r0, r8
	ldrb	r3, [r0, #20]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L14
	ldr	r3, .L18+88
	mov	lr, pc
	bx	r3
.L14:
	ldrb	r3, [r6, #20]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L16
	mov	r0, r7
	ldr	r3, .L18+88
	mov	lr, pc
	bx	r3
.L16:
	ldrh	r3, [r6, #8]
	mov	r0, #2
	mov	r1, #8
	ldr	r2, .L18+92
	ldr	r4, .L18+96
	mov	lr, pc
	bx	r4
	ldrh	r3, [r5, #8]
	mov	r0, #2
	mov	r1, #9
	ldr	r2, .L18+100
	mov	lr, pc
	bx	r4
	ldrb	r3, [sl, #0]	@ zero_extendqisi2
	mov	r0, #2
	mov	r1, #14
	ldr	r2, .L18+104
	mov	lr, pc
	bx	r4
	ldr	r2, .L18+108
	mov	r3, #0
	strb	r3, [r2, #0]
	b	.L17
.Lfe2:
	.size	main,.Lfe2-main
